# CC=gcc
# LIBS=-lssl -lcrypto
# CFLAGS=-g -Wall 
# COMPILE=$(CC) $(CFLAGS) $(LIBS)
# SRCDIR=$(wildcard */.)
# SRC=src/event_watch_file_state_comp.c src/files_check_func.c src/md5_checksum.c src/files_check_main.c
# CFILES=$(find src/*.c*)#ll.c llmain.c
# OBJECT=$(CFILES:.c=.o)
# OBJECTS=src/event_watch_file_state_comp.o src/files_check_func.o src/md5_checksum.o src/files_check_main.o
# TARGET=files_check.out
# VPATH = src/
# BUILDDIR = src/

# CURRENT_DIR = $(shell pwd)
# SRC_DIR   := $(CURRENT_DIR/src/)
# BUILD_DIR := $(CURRENT_DIR/src/))

# SRC       := $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.cpp))
# OBJ       := $(patsubst src/%.c,build/%.o,$(SRC))
# INCLUDES  := $(addprefix -I,$(SRC_DIR))

# vpath %.c $(SRC_DIR)

# define make-goal
# $1/%.o: %.c
#     $(COMPILE) $(INCLUDES) -c $$< -o $$@
# endef

# .PHONY: all checkdirs clean

# all: checkdirs build/$(TARGET)

# build/$(TARGET): $(OBJ)
# 	$(COMPILE) $^ -o $@


# checkdirs: $(BUILD_DIR)

# $(BUILD_DIR):
# 	@mkdir -p $@

# clean:
# 	@rm -rf $(BUILD_DIR)

# 	$(foreach bdir,$(BUILD_DIR),$(eval $(call make-goal,$(bdir))))

# all:$(TARGET) 
# $(TARGET):$(OBJECT)
# 	$(COMPILE) -o $@ $(OBJECT)
# %.c : %.o
# 	$(COMPILE) $(INCLUDES) -c $(CFILES) -o $(OBJECT)
# $(BUILDDIR)/%.o: %.c
# 	$(COMPILE) $< -o $@
# clean:
# 	rm $(TARGET) $(OBJECT)

# CC=gcc
# LIBS=-lssl -lcrypto
# CFLAGS=-g -Wall 
# COMPILE=$(CC) $(CFLAGS) $(LIBS)
# SRCDIR=$(wildcard */.)
# CFILES=$(SRCDIR/src/event_watch_file_state_comp.c SRCDIR/src/files_check_func.c SRCDIR/src/md5_checksum.c SRCDIR/src/files_check_main.c)#ll.c llmain.c
# OBJECT=$(CFILES:.c=.o)
# TARGET=files_check.out
# $(TARGET):$(OBJECT)
# 	# $(CC) -o $@ $(OBJECT)
# 	$(CC) -c $(CFLAGS) $(LIBS) $< -o $@
# %.o:%.c
# 	$(CC) -c $(CFLAGS) $(LIBS) $< -o $@
# clean:
# 	del $(TARGET).exe $(OBJECT)

TARGET_EXEC := files_check.out

BUILD_DIR := ./build
SRC_DIRS := ./src

# Find all the C files we want to compile
SRCS := $(shell find $(SRC_DIRS) -name *.c)

# String substitution for every C file.
# As an example, hello.c turns into ./build/hello.o
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)

# String substitution (suffix version without %).
# As an example, ./build/hello.cpp.o turns into ./build/hello.cpp.d
DEPS := $(OBJS:.o=.d)

# Every folder in ./src will need to be passed to GCC so that it can find header files
INC_DIRS := $(shell find $(SRC_DIRS) -type d)
# Add a prefix to INC_DIRS. So moduleA would become -ImoduleA. GCC understands this -I flag
INC_FLAGS := $(addprefix -I,$(INC_DIRS))

# The -MMD and -MP flags together generate Makefiles for us!
# These files will have .d instead of .o as the output.
CC := gcc
CFLAGS := -g -Wall 
LIBS := -lssl -lcrypto
CPPFLAGS := $(INC_FLAGS) 
# -MMD -MP

# The final build step.
$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	$(CC) $(OBJS) -o $@ $(LDFLAGS)

# Build step for C source
$(BUILD_DIR)/%.c.o: %.c
	mkdir -p $(dir $@)
	$(CC) $(CPPFLAGS) $(CFLAGS) $(LIBS) -c $< -o $@



.PHONY: clean
clean:
	rm -r $(BUILD_DIR)

# Include the .d makefiles. The - at the front suppresses the errors of missing
# Makefiles. Initially, all the .d files will be missing, and we don't want those
# errors to show up.
-include $(DEPS)